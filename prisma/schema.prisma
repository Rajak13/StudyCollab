// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks     Task[]
  notes     Note[]
  resources Resource[]
  votes     Vote[]
  comments  Comment[]
  groupMemberships GroupMember[]
  ownedGroups      StudyGroup[]  @relation("GroupOwner")

  @@map("users")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?
  category    String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  folderId  String?
  tags      String[]
  isPublic  Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder Folder? @relation(fields: [folderId], references: [id])

  @@map("notes")
}

model Folder {
  id       String @id @default(cuid())
  name     String
  parentId String?
  userId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children Folder[] @relation("FolderHierarchy")
  notes    Note[]

  @@map("folders")
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileName    String
  fileSize    Int
  mimeType    String
  subject     String?
  courseCode  String?
  tags        String[]
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes    Vote[]
  comments Comment[]

  @@map("resources")
}

model Vote {
  id         String   @id @default(cuid())
  type       VoteType
  userId     String
  resourceId String
  createdAt  DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@map("votes")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  parentId   String?
  userId     String
  resourceId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

model StudyGroup {
  id          String    @id @default(cuid())
  name        String
  description String?
  subject     String?
  university  String?
  isPrivate   Boolean   @default(false)
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner   User          @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members GroupMember[]

  @@map("study_groups")
}

model GroupMember {
  id        String    @id @default(cuid())
  role      GroupRole @default(MEMBER)
  joinedAt  DateTime  @default(now())
  userId    String
  groupId   String

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  group StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum GroupRole {
  OWNER
  ADMIN
  MEMBER
}